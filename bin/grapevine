#!/usr/bin/env ruby

dir = File.dirname(File.expand_path(__FILE__))
$:.unshift(File.join(dir, '..', 'lib'))

require 'rubygems'
require 'grapevine'
require 'grapevine/setup'
require 'commander/import'
require 'terminal-table/import'

program :name, 'Grapevine'
program :version, '1.0.0'
program :description, 'A simple message aggregator.'

# Setup file logger
global_option '--log FILE', 'Specifies the log file to use.' do |file|
  Grapevine.log.outputters << Log4r::FileOutputter.new('grapevine', :filename => file)
end


command :load do |c|
  c.syntax = 'grapevine load [name] [options]'
  c.description = 'Runs a specified loader.'
  c.when_called do|args, options|
    name = *args
    raise 'Loader name is required' if name.nil?
    loader = Grapevine::Loader.create(name)
    loader.load()
  end
end

command :'show topics' do |c|
  c.syntax = 'grapevine show topics'
  c.description = 'Displays the topics in the database.'
  c.when_called do|args, options|
    topics = Grapevine::Topic.all
    
    if topics.length == 0
      say "No topics exist in the database"
    else
      user_table = table do |t|
        t.headings = 'ID', 'Msgs', 'Name', 'Description'
        topics.each do |topic|
          t << [topic.id, topic.messages.length, topic.name[0..20], topic.description[0..35]]
        end
      end
      
      puts user_table
    end
  end
end

command :'show messages' do |c|
  c.syntax = 'grapevine show messages [options]'
  c.description = 'Displays the messages in the database.'
  c.option '--topic-id ID', String, 'Filters the messages by topic id.'

  c.when_called do|args, options|
    filter = {}
    filter.merge!(:topic_id => options.topic_id.to_i) if options.topic_id
    messages = Grapevine::Message.all(filter)
    
    if messages.length > 0
      user_table = table do |t|
        t.headings = 'ID', 'Source ID', 'Author'
        messages.each do |message|
          t << [message.id, message.source_id, message.author[0..50]]
        end
      end
      
      puts user_table
    end
  end
end

command :clean do |c|
  c.syntax = 'grapevine clean'
  c.description = 'Removes all data from the grapevine database.'
  c.when_called do|args, options|
    DataMapper.auto_migrate!
  end
end

